{
  "filename": "first-dubbo-filter.md",
  "__html": "<h1>First Dubbo Filter</h1>\n<h3>Overview</h3>\n<p>In overall design of Dubbo, Filter is a very important concept, most of Dubbo's functions are based on this\nextension point, and the Filter interception will be executed during each call.</p>\n<h4>Extension Mechanism of Dubbo Filter</h4>\n<p>There are already about 20 Filters implemented in Dubbo. Their entry is ProtocolFilterWrapper, ProtocolFilterWrapper\nmakes a Wrapper on Protocol and will be loaded when the extension is loaded. Then, let's see how\nthe Filter chain is constructed.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//ProtocolFilterWrapper.java</span>\n<span class=\"hljs-keyword\">public</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(Class&lt;T&gt; type, URL url)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-keyword\">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n            <span class=\"hljs-keyword\">return</span> protocol.refer(type, url);\n        }\n        <span class=\"hljs-keyword\">return</span> buildInvokerChain(protocol.refer(type, url), Constants.REFERENCE_FILTER_KEY, Constants.CONSUMER);\n    }\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-function\">Invoker&lt;T&gt; <span class=\"hljs-title\">buildInvokerChain</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>{\n        Invoker&lt;T&gt; last = invoker;\n        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>).<span class=\"hljs-title\">getActivateExtension</span>(<span class=\"hljs-title\">invoker</span>.<span class=\"hljs-title\">getUrl</span>(), <span class=\"hljs-title\">key</span>, <span class=\"hljs-title\">group</span>)</span>;\n        <span class=\"hljs-keyword\">if</span> (filters.size() &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = filters.size() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i --) {\n                <span class=\"hljs-keyword\">final</span> Filter filter = filters.get(i);\n                <span class=\"hljs-keyword\">final</span> Invoker&lt;T&gt; next = last;\n                last = <span class=\"hljs-keyword\">new</span> Invoker&lt;T&gt;() {\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Class&lt;T&gt; <span class=\"hljs-title\">getInterface</span><span class=\"hljs-params\">()</span> </span>{\n                        <span class=\"hljs-keyword\">return</span> invoker.getInterface();\n                    }\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> URL <span class=\"hljs-title\">getUrl</span><span class=\"hljs-params\">()</span> </span>{\n                        <span class=\"hljs-keyword\">return</span> invoker.getUrl();\n                    }\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isAvailable</span><span class=\"hljs-params\">()</span> </span>{\n                        <span class=\"hljs-keyword\">return</span> invoker.isAvailable();\n                    }\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n                        <span class=\"hljs-keyword\">return</span> filter.invoke(next, invocation);\n                    }\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>{\n                        invoker.destroy();\n                    }\n\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n                        <span class=\"hljs-keyword\">return</span> invoker.toString();\n                    }\n                };\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> last;\n    }\n\n</code></pre>\n<h4>Activation Mechanism of Dubbo Filter</h4>\n<p>Through the above code we can see that, in the method buildInvokerChain, first get all\nactivated chains, the chain here is already sorted. Then construct a call chain of Filter\nthrough the Invoker, finally the constructed call chain can be roughly expressed as: Filter1-&gt;Filter2-&gt;Filter3-&gt;......-&gt;Invoker,\nnow let's see the detailed flow of the activated chain in the above step.</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;T&gt; <span class=\"hljs-title\">getActivateExtension</span><span class=\"hljs-params\">(URL url, String key, String group)</span> </span>{\n        String value = url.getParameter(key);\n        <span class=\"hljs-keyword\">return</span> getActivateExtension(url, value == <span class=\"hljs-keyword\">null</span> || value.length() == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-keyword\">null</span> : Constants.COMMA_SPLIT_PATTERN.split(value), group);\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;T&gt; <span class=\"hljs-title\">getActivateExtension</span><span class=\"hljs-params\">(URL url, String[] values, String group)</span> </span>{\n        List&lt;T&gt; exts = <span class=\"hljs-keyword\">new</span> ArrayList&lt;T&gt;();\n        \n        List&lt;String&gt; names = values == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-keyword\">new</span> ArrayList&lt;String&gt;(<span class=\"hljs-number\">0</span>) : Arrays.asList(values);\n\n        <span class=\"hljs-keyword\">if</span> (! names.contains(Constants.REMOVE_VALUE_PREFIX + Constants.DEFAULT_KEY)) {\n            getExtensionClasses();\n            <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;String, Activate&gt; entry : cachedActivates.entrySet()) {\n                String name = entry.getKey();\n                Activate activate = entry.getValue();\n                <span class=\"hljs-keyword\">if</span> (isMatchGroup(group, activate.group())) {\n                    T ext = getExtension(name);\n                    <span class=\"hljs-keyword\">if</span> (! names.contains(name) &amp;&amp; ! names.contains(Constants.REMOVE_VALUE_PREFIX + name) \n                            &amp;&amp; isActive(activate, url)) {\n                        exts.add(ext);\n                    }\n                }\n            }\n            Collections.sort(exts, ActivateComparator.COMPARATOR);\n        }\n        List&lt;T&gt; usrs = <span class=\"hljs-keyword\">new</span> ArrayList&lt;T&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; names.size(); i ++) {\n            String name = names.get(i);\n            <span class=\"hljs-keyword\">if</span> (! name.startsWith(Constants.REMOVE_VALUE_PREFIX)\n                    &amp;&amp; ! names.contains(Constants.REMOVE_VALUE_PREFIX + name)) {\n                           <span class=\"hljs-keyword\">if</span> (Constants.DEFAULT_KEY.equals(name)) {\n                    <span class=\"hljs-keyword\">if</span> (usrs.size() &gt; <span class=\"hljs-number\">0</span>) {\n                        exts.addAll(<span class=\"hljs-number\">0</span>, usrs);\n                        usrs.clear();\n                    }\n                } <span class=\"hljs-keyword\">else</span> {\n                    T ext = getExtension(name);\n                    usrs.add(ext);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (usrs.size() &gt; <span class=\"hljs-number\">0</span>) {\n            exts.addAll(usrs);\n        }\n        <span class=\"hljs-keyword\">return</span> exts;\n    }\n</code></pre>\n<p>Through the above code we can see that, some of the Filters configured by the user are activated by default,\nand some need to be activated by the configuration file. The loading order of all Filters is to process Dubbo's\ndefault Filter first, and then to process the Filter defined by the user. With the &quot;-&quot; configuration, Dubbo's defualt Filter\ncan be replaced, with this configuration, the user can flexibly replace or modify the Filter's load order.</p>\n<h4>Built-in Filter of Dubbo</h4>\n<p>Dubbo has lots of built-in Filter. RpcContext, accesslog and other functions can be implemented by Dubbo.\nNow let's see the ConsumerContextFilter which used by the Consumer side for context delivery:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        RpcContext.getContext()\n                .setInvoker(invoker)\n                .setInvocation(invocation)\n                .setLocalAddress(NetUtils.getLocalHost(), <span class=\"hljs-number\">0</span>)\n                .setRemoteAddress(invoker.getUrl().getHost(), \n                                  invoker.getUrl().getPort());\n        <span class=\"hljs-keyword\">if</span> (invocation <span class=\"hljs-keyword\">instanceof</span> RpcInvocation) {\n            ((RpcInvocation)invocation).setInvoker(invoker);\n        }\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">return</span> invoker.invoke(invocation);\n        } <span class=\"hljs-keyword\">finally</span> {\n            RpcContext.getContext().clearAttachments();\n        }\n    }\n</code></pre>\n<p>This Filter records the state information during call, and passes the attachments parameter set\nby the client to the server through the invocation object, and these parameters will be cleared\nafter the call is completed, which is why the request status information can be recorded by times\nand delivered.</p>\n<h4>Implement A Dubbo Filter</h4>\n<p>Because of Dubbo's flexible design and good scalability, we can implement business logic\nin the call chain by implementing our own Dubbo Filter, such as time-consuming statistics, monitor information statistics, etc.\nNow, let's implement a simple Filter:</p>\n<p>Maven project structure:</p>\n<pre><code>src\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxFilter.java (impelement Filter interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-com.alibaba.dubbo.rpc.Filter (Plain text file with content：xxx=com.xxx.XxxFilter)\n</code></pre>\n<p>XxxFilter.java：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Result <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> RpcException </span>{\n        <span class=\"hljs-comment\">// before filter ...</span>\n        Result result = invoker.invoke(invocation);\n        <span class=\"hljs-comment\">// after filter ...</span>\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n</code></pre>\n<p>META-INF/dubbo/com.alibaba.dubbo.rpc.Filter：</p>\n<pre><code>xxx=com.xxx.XxxFilter\n</code></pre>\n<p>configure in xml as:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-comment\">&lt;!-- Consumer call process interception --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:reference</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Consumer call process default interception，intercept all reference --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:consumer</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">\"xxx\"</span>/&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Provider call process interception --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">\"xxx\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Provider call process default interception，intercept all service --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:provider</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">\"xxx\"</span>/&gt;</span>\n</code></pre>\n<p>or use annotation as:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Activate</span>(group = <span class=\"hljs-string\">\"consumer\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XxxFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>{\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>Using xml configuration is more flexible and granular.</p>\n<p>In before and after, you can implement your own business logic to give the filter a certain function.\nOnce written and configured, the filter is activated by the Dubbo and executed in the call chain.</p>\n",
  "link": "/en-us/blog/first-dubbo-filter.html",
  "meta": {}
}