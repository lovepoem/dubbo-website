{
  "filename": "dubbo-basic-usage-dubbo-consumer-configuration.md",
  "__html": "<h1>DubboBasic Usage - Dubbo Consumer Configuration</h1>\n<h2>Dubbo Consumer Configuration</h2>\n<h3>Consumer Configuration Detailed</h3>\n<p>There are 3 ways to configure the Dubbo Consumer: XML configuration, API call mode configuration, and annotation mode configuration.</p>\n<h4>XML Configuration</h4>\n<h6>Example of the simplest configuration:</h6>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    Xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    Xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    Xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema /dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;\n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;\n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;\n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;\n    &lt;dubbo:reference id=&quot;demoServiceRemote&quot; interface=&quot;com.alibaba.dubbo.demo.DemoService&quot; /&gt;\n&lt;/beans&gt;\n</code></pre>\n<blockquote>\n<p>For the supported configuration tags and corresponding configuration items, refer to the usage in the provider.</p>\n</blockquote>\n<blockquote>\n<p>Next, focus on the configuration of &lt;dubbo:reference/&gt;.</p>\n</blockquote>\n<ul>\n<li>&lt;dubbo:reference/&gt; List of main attributes supported:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>service reference id, as java bean id, requires unique</td>\n</tr>\n<tr>\n<td>Interface</td>\n<td>interface name for finding services</td>\n</tr>\n<tr>\n<td>version</td>\n<td>version number, consistent with the service provider's version</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>service method call timeout (ms)</td>\n</tr>\n<tr>\n<td>retries</td>\n<td>The number of retry attempts by the remote service, excluding the first call, no need to retry, please set to 0</td>\n</tr>\n<tr>\n<td>Connections</td>\n<td>For each provider's maximum number of connections, rmi, http, hessian, etc. The short connection protocol indicates the number of restricted connections, and the dubbo equal-length connection association indicates the number of long connections established</td>\n</tr>\n<tr>\n<td>Loadbalance</td>\n<td>Load balancing policy, optional values: random, roundrobin, leastactive, respectively: random, polling, least active call</td>\n</tr>\n<tr>\n<td>async</td>\n<td>Whether to execute asynchronously, unreliable asynchronous, just ignore return value, do not block execution thread</td>\n</tr>\n<tr>\n<td>generic</td>\n<td>generalized call, can bypass</td>\n</tr>\n<tr>\n<td>check</td>\n<td>Check if the provider exists at startup, true error, false ignore</td>\n</tr>\n<tr>\n<td>Actives</td>\n<td>Maximum concurrent calls per method per service consumer</td>\n</tr>\n</tbody>\n</table>\n<p>For other configuration properties, please refer to xsd: <a href=\"http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">http://dubbo.apache.org/schema/dubbo/dubbo.xsd</a></p>\n<ul>\n<li>&lt;dubbo:method/&gt; As a child of &lt;dubbo:reference/&gt;, it can be configured for methods. The more commonly used attributes are:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>executes</td>\n<td>request ceiling for service execution</td>\n</tr>\n<tr>\n<td>retries</td>\n<td>Timeout retries</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>call timeout</td>\n</tr>\n<tr>\n<td>Loadbalance</td>\n<td>Load balancing policy, optional values: random, roundrobin, leastactive, respectively: random, polling, least active call</td>\n</tr>\n<tr>\n<td>async</td>\n<td>Whether to execute asynchronously, unreliable asynchronous, just ignore return value, do not block execution thread</td>\n</tr>\n<tr>\n<td>Actives</td>\n<td>Maximum concurrent call limit per service consumer</td>\n</tr>\n</tbody>\n</table>\n<p>For other properties, you can refer to xsd above.</p>\n<h6>Configured coverage relationship</h6>\n<p><img src=\"https://cdn.nlark.com/lark/0/2018/png/15841/1536496436861-1b63bc4e-3e59-4aa3-800e-a32cfe64950d.png\" alt=\"undefined\"></p>\n<p>Coverage diagram for <center> configuration</center></p>\n<p>It contains the configuration of the consumer side and the provider, pay attention to the distinction.</p>\n<h4>annotation</h4>\n<h6>Reference Annotation Remote Service</h6>\n<pre><code>\nPublic class AnnotationConsumeService {\n\n    @com.alibaba.dubbo.config.annotation.Reference\n    Public AnnotateService annotateService;\n\n    // ...\n\n}\n\n</code></pre>\n<p>The configuration in this way is the same as the previous configuration in xml.</p>\n<blockquote>\n<p>To specify the way dubbo scans the path, refer to the implementation of the provider in the previous section.</p>\n</blockquote>\n<h4>api direct trigger</h4>\n<pre><code>Import com.alibaba.dubbo.rpc.config.ApplicationConfig;\nImport com.alibaba.dubbo.rpc.config.RegistryConfig;\nImport com.alibaba.dubbo.rpc.config.ConsumerConfig;\nImport com.alibaba.dubbo.rpc.config.ReferenceConfig;\nImport com.xxx.XxxService;\n// current application configuration\n\nApplicationConfig application = new ApplicationConfig();\napplication.setName(&quot;yyy&quot;);\n// Connect to the registry configuration\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(&quot;10.20.130.230:9090&quot;);\nregistry.setUsername(&quot;aaa&quot;);\nregistry.setPassword(&quot;bbb&quot;);\n \n// Note: ReferenceConfig is a heavy object that internally encapsulates the connection to the registry and the connection to the service provider.\n// reference remote service\nReferenceConfig&lt;XxxService&gt; reference = new ReferenceConfig&lt;XxxService&gt;(); // This instance is heavy, encapsulates the connection to the registry and the connection to the provider, please cache it yourself, otherwise it may cause memory and connection leaks.\n\nreference.setApplication(application);\nreference.setRegistry(registry); // Multiple registries can use setRegistries()\nreference.setInterface(XxxService.class);\nreference.setVersion(&quot;1.0.0&quot;);\n\n// Use xxxService like local beans\nXxxService xxxService = reference.get();\n</code></pre>\n<h6>methodSpecial settings</h6>\n<pre><code>\n// Method level configuration\nList&lt;MethodConfig&gt; methods = new ArrayList&lt;MethodConfig&gt;();\nMethodConfig method = new MethodConfig();\nmethod.setName(&quot;createXxx&quot;);\nmethod.setTimeout(10000);\nmethod.setRetries(0);\nMethods.add(method);\n// reference remote service\nReferenceConfig&lt;XxxService&gt; reference = new ReferenceConfig&lt;XxxService&gt;(); // This instance is heavy, encapsulates the connection to the registry and the connection to the provider, please cache it yourself, otherwise it may cause memory and connection leaks.\n...\nreference.setMethods(methods); // Set method level configuration\n</code></pre>\n<h3>Consumer Calling Remote Service</h3>\n<p>The above chapters are more from a configuration point of view, and then through a complete example, explain the complete use of dubbo consumer.</p>\n<p>There is only one service UserReadService in this example, there is a method getUserById. Need to call a remote service through Dubbo. The specific steps are as follows:</p>\n<ol>\n<li>Create a project\nIf there is already a project, you can ignore it. Create a spring boot project that can be created at <a href=\"https://start.spring.io/\">https://start.spring.io/</a>.\nThe provider of the service has been defined in the provider section.</li>\n<li>Call the service</li>\n</ol>\n<pre><code>@RestController\nPublic class UserTestController{\n    @Autowired\n    Private UserReadService userReadService;\n    @RequestMapping(&quot;/user/getById&quot;)\n    Public String getUserById(Long id){\n        // just test\n        Return userReadService.getUserById(id).toString();\n    }\n}\n</code></pre>\n<p>3.Dubbo configuration</p>\n<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n    Xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    Xmlns:dubbo=&quot;http://dubbo.apache.org/schema/dubbo&quot;\n    Xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema /dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;&gt;\n    &lt;dubbo:application name=&quot;hello-world-app&quot; /&gt;\n    &lt;dubbo:registry address=&quot;multicast://224.5.6.7:1234&quot; /&gt;\n    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;\n    &lt;dubbo:reference id=&quot;userReadService&quot; interface=&quot;com.package.UserReadService&quot;check=&quot;false&quot; /&gt;\n&lt;/beans&gt;\n</code></pre>\n<p>Other ways of configuring Dubbo can refer to the relevant configuration in the previous section, or use the integrated dubbo spring boot starter mode.</p>\n",
  "link": "/en-us/blog/dubbo-basic-usage-dubbo-consumer-configuration.html",
  "meta": {}
}