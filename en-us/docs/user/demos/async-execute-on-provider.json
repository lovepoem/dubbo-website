{
  "filename": "async-execute-on-provider.md",
  "__html": "<h1>Asynchronous Execution</h1>\n<p>The asynchronous execute on provider switches the blocked service from the internal thread pool of Dubbo to the service custom thread to avoid over-occupation of the Dubbo thread pool, which helps to avoid mutual influence between different services.Asynchronous-Execution is not conducive to saving resources or improving RPC responsiveness, because if business execution needs to be blocked, there is always a thread to be responsible for execution.</p>\n<blockquote>\n<p>Note: Asynchronous execute on provider and asynchronous execute on consumer are independent of each other. You can configure ends of any orthogonal combination.</p>\n<ul>\n<li>Synchronous Execution On Consumer - Synchronous Execution On Provider</li>\n<li>Asynchronous Executio On Consumer - Synchronous Execution On Provider</li>\n<li>Synchronous Execution On Consumer - Asynchronous Executio On Provider</li>\n<li>Asynchronous Execution On Consumer - Asynchronous Executio On Provider</li>\n</ul>\n</blockquote>\n<h2>Interface that defines the CompletableFuture signature</h2>\n<p>Service interface definition：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\">CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<p>Service implementation：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        RpcContext savedContext = RpcContext.getContext();\n        <span class=\"hljs-comment\">// It is recommended to provide a custom thread pool for supplyAsync to avoid using the JDK common thread pool.</span>\n        <span class=\"hljs-keyword\">return</span> CompletableFuture.supplyAsync(() -&gt; {\n            System.out.println(savedContext.getAttachment(<span class=\"hljs-string\">\"consumer-key1\"</span>));\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">5000</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"async response from provider.\"</span>;\n        });\n    }\n}\n</code></pre>\n<p>The business execution has been switched from the Dubbo thread to the business thread by <code>return CompletableFuture.supplyAsync()</code>, avoiding blocking of the Dubbo thread pool.</p>\n<h2>Use AsyncContext</h2>\n<p>Dubbo provides an asynchronous interface <code>AsyncContext</code> similar to Serverlet 3.0. It can also implement asynchronous execution of the Provider without the CompletableFuture signature interface.</p>\n<p>Service interface definition：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n}\n</code></pre>\n<p>Service export, exactly the same as ordinary service：</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"asyncService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.governance.impl.AsyncServiceImpl\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dubbo:service</span> <span class=\"hljs-attr\">interface</span>=<span class=\"hljs-string\">\"org.apache.dubbo.samples.governance.api.AsyncService\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"asyncService\"</span>/&gt;</span>\n</code></pre>\n<p>Service implementation：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AsyncService</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span> </span>{\n        <span class=\"hljs-keyword\">final</span> AsyncContext asyncContext = RpcContext.startAsync();\n        <span class=\"hljs-keyword\">new</span> Thread(() -&gt; {\n            <span class=\"hljs-comment\">// If you want to use context, you must do it at the very beginning</span>\n            asyncContext.signalContextSwitch();\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">500</span>);\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n            <span class=\"hljs-comment\">// Write to response</span>\n            asyncContext.write(<span class=\"hljs-string\">\"Hello \"</span> + name + <span class=\"hljs-string\">\", response from provider.\"</span>);\n        }).start();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n    }\n}\n</code></pre>\n",
  "link": "/en-us/docs/user/demos/async-execute-on-provider.html",
  "meta": {}
}