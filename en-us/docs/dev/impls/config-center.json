{
  "filename": "config-center.md",
  "__html": "<h1>Dubbo Configuration Center</h1>\n<h2>Design Purpose</h2>\n<p>The key function of CC(Configuration Center) is to act as a Key-Value store. Dubbo Framework tells CC the key it care about, CC return the corresponding value.</p>\n<p>Divided by application scenarios, CC mainly undertake the following responsibilities in Dubbo Framework:</p>\n<ul>\n<li>As a external configuration center, CC store configuration files like dubbo.properties, where the key is usually file name like dubbo.properties, and value is content of the file.</li>\n<li>Store single configuration items, like all kinds of switchs, contants, etc.</li>\n<li>Store service governance rules, where the key is usually formated like &quot;ServiceName+RuleType&quot;, while value is the specific governance rule.</li>\n</ul>\n<p>Dubbo CC also introduced concepts of <code>namespace</code> and <code>group</code> to better manage Key-Value pairs by group, those concepts are already built-in in many professional third-party configuration centers. In most cases, <code>namespace</code> is used to isolate different tetants, while <code>group</code> is used to divid the key set from one tetant into groups.</p>\n<p>Dubbo CC has currently supported Zookeeper, Nacos, Etcd, Consul, Apollo, next we will see how Dubbo CC is mapped to a specific third-party implementation.</p>\n<h2>Extension Interface</h2>\n<ul>\n<li><code>org.apache.dubbo.configcenter.DynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.DynamicConfiguration</code></li>\n</ul>\n<h2>Existing Extension</h2>\n<ul>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.NacosDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.EtcdDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ConsulDynamicConfigurationFactory</code></li>\n<li><code>org.apache.dubbo.configcenter.support.zookeeper.ApolloDynamicConfigurationFactory</code></li>\n</ul>\n<h2>Implementation</h2>\n<h3>Zookeeper</h3>\n<p>Zookeeper provided a tree-structure storage model, the implementation is as follows:</p>\n<p><img src=\"/img/configcenter_zk_model.jpg\" alt=\"image-20190127225608553\"></p>\n<p>namespace, group, key are corresponded to different levels of ZNodes, while value is content of the key ZNode.</p>\n<ol>\n<li>\n<p>External configuration cetner dubbo.properties</p>\n<p><img src=\"/img/configcenter_zk_properties.jpg\" alt=\"image-20190127225608553\"></p>\n<p>The figure above shows the storage structure of the dubbo.properties file in two different scopes in zookeeper:</p>\n<ul>\n<li>namespace: both are 'dubbo'</li>\n<li>group: 'dubbo' is globally shared by all applications; 'demo-provider' is application level, only affect the specific application</li>\n<li>key: dubbo.properties</li>\n</ul>\n</li>\n<li>\n<p>Single configuration item</p>\n<p><img src=\"/img/configcenter_zk_singleitem.jpg\" alt=\"image-20190127225608553\"></p>\n<p>The figure above shows how we set the shutdown wait time to 15000:</p>\n<ul>\n<li>namespace: dubbo</li>\n<li>group: dubbo</li>\n<li>key: dubbo.service.shutdown.wait</li>\n<li>value: 15000</li>\n</ul>\n</li>\n<li>\n<p>Service governance rule</p>\n<p><img src=\"/img/configcenter_zk_rule.jpg\" alt=\"image-20190127225608553\"></p>\n<p>The figure above shows an application-level conditional routing rule:</p>\n<ul>\n<li>namespace：dubbo</li>\n<li>group：dubbo</li>\n<li>key：governance-conditionrouter-consumer.condition-router, in wich governance-conditionrouter-consumer is application name, condition-router represents condition router.</li>\n</ul>\n<blockquote>\n<p>Notice:</p>\n<p>Dubbo support two level of governance rules: application, service. The key format are as follows:</p>\n<ul>\n<li>application level {application name + rule suffix}, such as: <code>demo-application.configurators</code>,<code>demo-application.tag-router</code>, etc.</li>\n<li>service level {service interface name:[version]:[group] + rule suffix}, in which version and group are optional, such as: <code>org.apache.dubbo.demo.DemoService::.configurators</code>,<code>org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators</code>, etc.</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3>Etcd &amp; Consul</h3>\n<p>Etcd and Consul are essencially tree-structure storage like Zookeeper, see zookeeper for implementation.</p>\n<h3>Nacos</h3>\n<p>Nacos is a professional third-party configuration center, it has a storage structure designed specifically for the configuration center, including built-in concepts like namespace, group, dataid, etc. And these concepts basically correspond to the configuration center of the Dubbo framework abstraction.</p>\n<p>The correspondence with the Zookeeper implementation is as follows：</p>\n<p><img src=\"/img/configcenter_nacos_model.jpg\" alt=\"image-20190127225608553\"></p>\n<p>Refer to the example described in the zookeeper implementation above, where dataid might be:</p>\n<ul>\n<li>External configuration center: dubbo.properties</li>\n<li>Single configuration item: dubbo.service.shutdown.wait</li>\n<li>Service governance rule: org.apache.dubbo.demo.DemoService:1.0.0:group1.configurators</li>\n</ul>\n<h3>Apollo</h3>\n<p>Apollo is similar to Nacos. Please refer to the documentation on the Apollo section.</p>\n",
  "link": "/en-us/docs/dev/impls/config-center.html",
  "meta": {}
}