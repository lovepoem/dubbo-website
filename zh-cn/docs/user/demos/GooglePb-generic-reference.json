{
  "filename": "GooglePb-generic-reference.md",
  "__html": "<h1>GoogleProtobuf对象泛化调用</h1>\n<p>泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况，参考 <a href=\"http://dubbo.apache.org/zh-cn/docs/user/demos/group-merger.html\">泛化调用</a>。\n一般泛化调用只能用于生成的服务参数为POJO的情况，而GoogleProtobuf的对象是基于Builder生成的非正常POJO，可以通过protobuf-json泛化调用。<br>\nGoogleProtobuf序列化相关的Demo可以参考<a href=\"https://github.com/vio-lin/dubbo-samples/tree/protobuf-demo\">protobuf-demo</a></p>\n<h1>通过Spring对Goolgle Protobuf对象泛化调用</h1>\n<p>在Spring中配置声明generic = &quot;protobuf-json&quot;</p>\n<pre><code>&lt;dubbo:reference id=&quot;barService&quot; interface=&quot;com.foo.BarService&quot; generic=&quot;protobuf-json&quot; /&gt;\n</code></pre>\n<p>在 Java 代码获取 barService 并开始泛化调用：</p>\n<pre><code>GenericService barService = (GenericService) applicationContext.getBean(&quot;barService&quot;);\nObject result = barService.$invoke(&quot;sayHello&quot;,new String[]{&quot;org.apache.dubbo.protobuf.GooglePbBasic$CDubboGooglePBRequestType&quot;}, new Object[]{&quot;{\\&quot;double\\&quot;:0.0,\\&quot;float\\&quot;:0.0,\\&quot;bytesType\\&quot;:\\&quot;Base64String\\&quot;,\\&quot;int32\\&quot;:0}&quot;});\n</code></pre>\n<h1>通过 API 方式对Goolgle Protobuf对象泛化调用</h1>\n<pre><code>ReferenceConfig&lt;GenericService&gt; reference = new ReferenceConfig&lt;GenericService&gt;();\n// 弱类型接口名\nreference.setInterface(GenericService.class.getName());\nreference.setInterface(&quot;com.xxx.XxxService&quot;);\n// 声明为Protobuf-json\nreference.setGeneric(Constants.GENERIC_SERIALIZATION_PROTOBUF);\n\nGenericService genericService = reference.get();\nMap&lt;String, Object&gt; person = new HashMap&lt;String, Object&gt;();\nperson.put(&quot;fixed64&quot;, &quot;0&quot;);\nperson.put(&quot;int64&quot;, &quot;0&quot;);\n// 参考google官方的protobuf 3 的语法，服务的每个方法中只传输一个POJO对象\n// protobuf的泛化调用只允许传递一个类型为String的json对象来代表请求参数\nString requestString = new Gson().toJson(person);\n// 返回对象是GoolgeProtobuf响应对象的json字符串。\nObject result = genericService.$invoke(&quot;sayHello&quot;, new String[] {\n    &quot;com.xxx.XxxService.GooglePbBasic$CDubboGooglePBRequestType&quot;},\n    new Object[] {requestString});\n</code></pre>\n<h1>有关GoogleProtobuf对象的处理</h1>\n<p>GoogleProtobuf对象是由Protocol契约生成,相关知识请参考<a href=\"https://developers.google.com/protocol-buffers/?hl=zh-CN\">ProtocolBuffers文档</a>。\n假如有如下Protobuf 契约</p>\n<pre><code>syntax = &quot;proto3&quot;;\npackage com.xxx.XxxService.GooglePbBasic.basic;\nmessage CDubboGooglePBRequestType {\n    double double = 1;\n    float float = 2;\n    int32 int32 = 3;\n    bool bool = 13;\n    string string = 14;\n    bytes bytesType = 15;\n}\n\nmessage CDubboGooglePBResponseType {\n    string msg = 1;\n}\n\nservice CDubboGooglePBService {\n    rpc sayHello (CDubboGooglePBRequestType) returns (CDubboGooglePBResponseType);\n}\n</code></pre>\n<p>则对应请求按照如下方法构造</p>\n<pre><code>Map&lt;String, Object&gt; person = new HashMap&lt;&gt;();\nperson.put(&quot;double&quot;, &quot;1.000&quot;);\nperson.put(&quot;float&quot;, &quot;1.00&quot;);\nperson.put(&quot;int32&quot;,&quot;1&quot; );\nperson.put(&quot;bool&quot;,&quot;false&quot; );\n//String 的对象需要经过base64编码\nperson.put(&quot;string&quot;,&quot;someBaseString&quot;);\nperson.put(&quot;bytesType&quot;,&quot;150&quot;);\n</code></pre>\n<h1>GoogleProtobuf服务元数据解析</h1>\n<p>Google Protobuf对象缺少标准的JSON格式，生成的服务元数据信息存在错误。\n请添加如下依赖元数据解析的依赖。</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n    &lt;artifactId&gt;dubbo-metadata-definition-protobuf&lt;/artifactId&gt;\n    &lt;version&gt;${dubbo.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>从服务元数据中也可以比较容易构建泛化调用对象。</p>\n",
  "link": "/zh-cn/docs/user/demos/GooglePb-generic-reference.html",
  "meta": {}
}